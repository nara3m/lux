.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SPCHAINABBREV 1"
.TH SPCHAINABBREV 1 "2012-09-04" "perl v5.10.1" "LipidMAPSTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPChainAbbrev \- Methods for processing SP chain abbreviations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use SPChainAbbrev;
.PP
use SPChainAbbrev qw(:all);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SPChainAbbrev module provides these methods:
.PP
.Vb 11
\&    ChainAbbrevNameExists \- Is it a supported chain abbreviation
\&    ExpandChainAbbrev \- Expand wild cards in chain abbreviation
\&    GetChainAbbrevToNameMap \- Get chain name
\&    GetChainLenAbbrevSupportedMap \- Get reference to supported chain
\&                                    abbreviations data
\&    GetChainLenAbbrevDbleBondGeometyDataMap \- Get reference to supported chain
\&                                              double bond geometry data
\&    GetSupportedChainLenList \- Get supported chain lengths
\&    IsSphingosineChainAbbrev \- Is it a sphingosine chain abbreviation
\&    IsSphingosineC18ChainAbbrev \- Is it a sphingosine C18 abbreviation
\&    IsSphinganineC18ChainAbbrev \- Is it a sphinganine C18 abbreviation
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBChainAbbrevNameExists\fR" 4
.IX Item "ChainAbbrevNameExists"
.Vb 1
\&    $Status = ChainAbbrevNameExists($ChainAbbrev, $ChainType);
.Ve
.Sp
Return 1 or 0 based on whether it's a supported chain name.
.IP "\fBExpandChainAbbrev\fR" 4
.IX Item "ExpandChainAbbrev"
.Vb 1
\&    $AbbrevArrayRef = ExpandChainAbbrev($Abbrev);
.Ve
.Sp
Return a reference to an array containing complete chain abbreviations. Wild card
characters in chain abbreviation name are expanded to generate fully qualified
chain abbreviations.
.IP "\fBGetChainAbbrevToNameMap\fR" 4
.IX Item "GetChainAbbrevToNameMap"
.Vb 1
\&    $AbbrevNameHashRef = GetChainAbbrevToNameMap();
.Ve
.Sp
Return a reference to hash with chain abbreviation/name as key/value pair.
.IP "\fBGetChainLenAbbrevSupportedMap\fR" 4
.IX Item "GetChainLenAbbrevSupportedMap"
.Vb 1
\&    $ChainLenHashRef = GetChainLenAbbrevSupportedMap();
.Ve
.Sp
Return a reference to hash with supported chain length as hash key.
.IP "\fBGetChainLenAbbrevDbleBondGeometyDataMap\fR" 4
.IX Item "GetChainLenAbbrevDbleBondGeometyDataMap"
.Vb 1
\&    $ChainLenDblBondHashRef = GetChainLenAbbrevDbleBondGeometyDataMap();
.Ve
.Sp
Return a reference to hash containing information about chain length, number of
double bonds and geometry of double bonds.
.IP "\fBGetSupportedChainLenList\fR" 4
.IX Item "GetSupportedChainLenList"
.Vb 1
\&    $ChainLengthListRef = GetSupportedChainLenList();
.Ve
.Sp
Return a reference to a sorted list containing supported chain lengths.
.IP "\fBIsChainAbbrevOkay\fR" 4
.IX Item "IsChainAbbrevOkay"
.Vb 1
\&    $Status = IsChainAbbrevOkay($ChainAbbrev);
.Ve
.Sp
Return 1 or 0 based on whether chain abbreviation is valid.
.IP "\fBIsSphingosineChainAbbrev\fR" 4
.IX Item "IsSphingosineChainAbbrev"
.Vb 1
\&    $Status = IsSphingosineChainAbbrev($ChainAbbrev);
.Ve
.Sp
Return 1 or 0 based on whether it's a sphingosine chain abbreviation.
.IP "\fBIsSphingosineC18ChainAbbrev\fR" 4
.IX Item "IsSphingosineC18ChainAbbrev"
.Vb 1
\&    $Status = IsSphingosineC18ChainAbbrev($ChainAbbrev);
.Ve
.Sp
Return 1 or 0 based on whether it's a sphingosine abbreviation with chain length
of 18.
.IP "\fBIsSphinganineC18ChainAbbrev\fR" 4
.IX Item "IsSphinganineC18ChainAbbrev"
.Vb 1
\&    $Status = IsSphinganineC18ChainAbbrev($ChainAbbrev);
.Ve
.Sp
Return 1 or 0 based on whether it's a sphinganine abbreviation with chain length
of 18.
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Eoin Fahy
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LMAPSStr.pm, ChainStr.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006\-2012. The Regents of the University of California. All Rights Reserved.
.SH "LICENSE"
.IX Header "LICENSE"
Modified \s-1BSD\s0 License
